{"version":3,"sources":["App.module.scss","features/event/slice.ts","app/hooks.ts","features/event/api.ts","components/EventList/ItemList.tsx","components/EventList/utils.ts","components/EventList/EventItem.tsx","components/EventList/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","components/EventList/index.module.scss"],"names":["module","exports","EventTypes","useAppSelector","useSelector","BIGNUM_POW18","BigNumber","pow","TOKEN_MAP","getEventLogs","a","provider","InfuraProvider","wallet","Wallet","createRandom","connectedWallet","connect","getColonyNetworkClient","Network","Mainnet","networkAddress","networkClient","getColonyClient","colonyClient","Promise","all","getColonyInitialisedLogs","getColonyRoleSetLogs","getPayoutClaimedLogs","getDomainAddedLogs","colonyInitialisedLogs","colonyRoleSetLogs","payoutClaimedLogs","domainAddedLogs","allLogs","concat","sortedLogs","sort","b","logTime","colonyInitialisedFilter","filters","ColonyInitialised","getLogs","colonyInitialisedRawLogs","map","event","getBlockTime","blockHash","id","logIndex","colonyAddress","address","eventType","colonyRoleSetFilter","ColonyRoleSet","colonyRoleSetRawLogs","parsedLog","interface","parseLog","values","user","role","domainId","ColonyRole","userAddress","toString","payoutClaimedFilter","PayoutClaimed","payoutClaimedRawLogs","token","amount","div","fundingPotId","getFundingPot","associatedTypeId","getPayment","recipient","domainAddedFilter","DomainAdded","domainAddedRawLogs","getEventLogsAsync","createAsyncThunk","events","eventSlice","createSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","ItemList","props","className","styles","itemListContainer","join","children","formatDate","ts","dayjs","format","ColonyInitialisedEventItem","htmlProps","eventItem","avatar","seed","content","primary","secondary","ColonyRoleSetEventItem","heavy","PayoutClaimedEventItem","DomainAddedEventItem","EventItem","EventList","App","dispatch","useDispatch","useEffect","app","store","configureStore","reducer","eventReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dfc6dea6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2ziFi\"};","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { getEventLogs } from './api';\n\nexport enum EventTypes {\n  ColonyInitialised,\n  ColonyRoleSet,\n  PayoutClaimed,\n  DomainAdded,\n}\n\ntype EventLogBase = {\n  id: string,\n  colonyAddress: string,\n  eventType: EventTypes,\n  logTime: number,\n};\n\nexport type ColonyInitialisedEventLog = EventLogBase;\n\nexport type ColonyRoleSetEventLog = EventLogBase & {\n  role: string,\n  userAddress: string,\n  domainId: string,\n};\n\nexport type PayoutClaimedEventLog = EventLogBase & {\n  userAddress: string,\n  amount: string,\n  token: string,\n  fundingPotId: string,\n};\n\nexport type DomainAddedEventLog = EventLogBase & {\n  domainId: string,\n};\n\nexport type EventLog = ColonyInitialisedEventLog | ColonyRoleSetEventLog | PayoutClaimedEventLog | DomainAddedEventLog;\n\nexport type EventState = {\n  events: EventLog[],\n}\n\nconst initialState: EventState = {\n  events: [],\n};\n\nexport const getEventLogsAsync = createAsyncThunk(\n  'event/getEventLogs',\n  async () => {\n    const events = await getEventLogs();\n    return events;\n  }\n);\n\nexport const eventSlice = createSlice({\n  name: \"event\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getEventLogsAsync.fulfilled, (state, action) => {\n        state.events = action.payload;\n      });\n  },\n});\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.event.events;\n\nexport default eventSlice.reducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { getColonyNetworkClient, getLogs, getBlockTime, Network, ColonyClientV4, ColonyRole } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider } from 'ethers/providers';\nimport { BigNumber } from 'ethers/utils';\nimport {\n  ColonyInitialisedEventLog,\n  ColonyRoleSetEventLog,\n  PayoutClaimedEventLog,\n  DomainAddedEventLog,\n  EventLog,\n  EventTypes,\n} from './slice';\n\n// Set up the network address constants that you\"ll be using\n// The two below represent the current ones on mainnet\n// Don't worry too much about them, just use them as-is\nconst MAINNET_NETWORK_ADDRESS = `0x5346D0f80e2816FaD329F2c140c870ffc3c3E2Ef`;\nconst MAINNET_BETACOLONY_ADDRESS = `0x869814034d96544f3C62DE2aC22448ed79Ac8e70`;\n\n// this magic number is used for handling numbers in BigNumber\nconst BIGNUM_POW18 = new BigNumber(10).pow(18);\n// mapping from address to token\nconst TOKEN_MAP: { [key: string]: string } = {\n  \"0x0dd7b8f3d1fa88FAbAa8a04A0c7B52FC35D4312c\": \"ΒLNY\",\n  \"0x6B175474E89094C44Da98b954EedeAC495271d0F\": \"DAI\",\n};\n\nexport const getEventLogs = async (): Promise<EventLog[]> => {\n  const provider = new InfuraProvider();\n  const wallet = Wallet.createRandom();\n  const connectedWallet = wallet.connect(provider);\n  const networkClient = await getColonyNetworkClient(Network.Mainnet, connectedWallet, { networkAddress: MAINNET_NETWORK_ADDRESS });\n\n  // filter for event type \"ColonyRoleSet\" available in ColonyClientV4 but not ColonyClient\n  const colonyClient = await networkClient.getColonyClient(MAINNET_BETACOLONY_ADDRESS) as ColonyClientV4;\n\n  // get event logs (async) for 4 types: ColonyInitialised, ColonyRoleSet, PayoutClaimed, DomainAdded\n  const [colonyInitialisedLogs, colonyRoleSetLogs, payoutClaimedLogs, domainAddedLogs] = await Promise.all([\n    getColonyInitialisedLogs(colonyClient, provider),\n    getColonyRoleSetLogs(colonyClient, provider),\n    getPayoutClaimedLogs(colonyClient, provider),\n    getDomainAddedLogs(colonyClient, provider),\n  ]);\n\n  const allLogs = ([] as EventLog[]).concat(colonyInitialisedLogs).concat(colonyRoleSetLogs).concat(payoutClaimedLogs).concat(domainAddedLogs);\n  const sortedLogs = allLogs.sort((a, b) => b.logTime - a.logTime);\n\n  return sortedLogs;\n};\n\nconst getColonyInitialisedLogs = async (colonyClient: ColonyClientV4, provider: InfuraProvider): Promise<ColonyInitialisedEventLog[]> => {\n  const colonyInitialisedFilter = colonyClient.filters.ColonyInitialised(null, null);\n  const colonyInitialisedRawLogs = await getLogs(colonyClient, colonyInitialisedFilter);\n  const colonyInitialisedLogs = await Promise.all(colonyInitialisedRawLogs.map(async (event) => {\n    const logTime = await getBlockTime(provider, event.blockHash ?? \"\");\n    return {\n      id: `ColonyInitialised-${event.blockHash}-${event.logIndex}`,\n      colonyAddress: event.address,\n      eventType: EventTypes.ColonyInitialised,\n      logTime,\n    };\n  }));\n  return colonyInitialisedLogs;\n};\n\nconst getColonyRoleSetLogs = async (colonyClient: ColonyClientV4, provider: InfuraProvider): Promise<ColonyRoleSetEventLog[]> => {\n  const colonyRoleSetFilter = colonyClient.filters.ColonyRoleSet(null, null, null, null);\n  const colonyRoleSetRawLogs = await getLogs(colonyClient, colonyRoleSetFilter);\n  const colonyRoleSetLogs = await Promise.all(colonyRoleSetRawLogs.map(async (event) => {\n    const parsedLog = colonyClient.interface.parseLog(event);\n    const { user, role } = parsedLog.values;\n    const domainId = new BigNumber(parsedLog.values.domainId);\n    const logTime = await getBlockTime(provider, event.blockHash ?? \"\");\n    return {\n      id: `ColonyRoleSet-${event.blockHash}-${event.logIndex}`,\n      colonyAddress: event.address,\n      eventType: EventTypes.ColonyRoleSet,\n      role: ColonyRole[role],\n      userAddress: user,\n      domainId: domainId.toString(),\n      logTime,\n    };\n  }));\n  return colonyRoleSetLogs;\n};\n\nconst getPayoutClaimedLogs = async (colonyClient: ColonyClientV4, provider: InfuraProvider): Promise<PayoutClaimedEventLog[]> => {\n  const payoutClaimedFilter = colonyClient.filters.PayoutClaimed(null, null, null);\n  const payoutClaimedRawLogs = await getLogs(colonyClient, payoutClaimedFilter);\n  const payoutClaimedLogs = await Promise.all(payoutClaimedRawLogs.map(async (event) => {\n    const parsedLog = colonyClient.interface.parseLog(event);\n    const { token } = parsedLog.values;\n    const amount = new BigNumber(parsedLog.values.amount).div(BIGNUM_POW18);\n    const fundingPotId = new BigNumber(parsedLog.values.fundingPotId);\n    const { associatedTypeId } = await colonyClient.getFundingPot(fundingPotId);\n    const { recipient } = await colonyClient.getPayment(associatedTypeId);\n    const logTime = await getBlockTime(provider, event.blockHash ?? \"\");\n    return {\n      id: `PayoutClaimed-${event.blockHash}-${event.logIndex}`,\n      colonyAddress: event.address,\n      eventType: EventTypes.PayoutClaimed,\n      userAddress: recipient,\n      amount: amount.toString(),\n      token: TOKEN_MAP[token] ?? ` ${token}`,\n      fundingPotId: fundingPotId.toString(),\n      logTime,\n    };\n  }));\n  return payoutClaimedLogs;\n};\n\nconst getDomainAddedLogs = async (colonyClient: ColonyClientV4, provider: InfuraProvider): Promise<DomainAddedEventLog[]> => {\n  const domainAddedFilter = colonyClient.filters.DomainAdded(null);\n  const domainAddedRawLogs = await getLogs(colonyClient, domainAddedFilter);\n  const domainAddedLogs = await Promise.all(domainAddedRawLogs.map(async (event) => {\n    const parsedLog = colonyClient.interface.parseLog(event);\n    const domainId = new BigNumber(parsedLog.values.domainId);\n    const logTime = await getBlockTime(provider, event.blockHash ?? \"\");\n    return {\n      id: `DomainAdded-${event.blockHash}-${event.logIndex}`,\n      colonyAddress: event.address,\n      eventType: EventTypes.DomainAdded,\n      domainId: domainId.toString(),\n      logTime,\n    };\n  }));\n  return domainAddedLogs;\n};","import React from 'react';\nimport styles from './index.module.scss';\n\nexport type ItemListProps = React.HTMLAttributes<HTMLElement>;\n\nconst ItemList = (props: ItemListProps) => (\n  <ol {...props} className={[styles.itemListContainer, props.className].join(\" \")}>\n    {props.children}\n  </ol>\n);\n\nexport default ItemList;","import dayjs from 'dayjs';\n\nexport const formatDate = (ts: number): string => dayjs(ts).format(\"DD MMM\");","import React from 'react';\nimport Blockies from 'react-blockies';\nimport {\n  ColonyInitialisedEventLog,\n  ColonyRoleSetEventLog,\n  PayoutClaimedEventLog,\n  DomainAddedEventLog,\n  EventLog,\n  EventTypes,\n} from '../../features/event/slice';\nimport { formatDate } from './utils';\nimport styles from './index.module.scss';\n\nexport type EventItemProps = React.HTMLAttributes<HTMLElement> & {\n  event: EventLog,\n};\nexport type ColonyInitialisedEventItemProps = React.HTMLAttributes<HTMLElement> & {\n  event: ColonyInitialisedEventLog,\n};\nexport type ColonyRoleSetEventItemProps = React.HTMLAttributes<HTMLElement> & {\n  event: ColonyRoleSetEventLog,\n};\nexport type PayoutClaimedEventItemProps = React.HTMLAttributes<HTMLElement> & {\n  event: PayoutClaimedEventLog,\n};\nexport type DomainAddedEventItemProps = React.HTMLAttributes<HTMLElement> & {\n  event: DomainAddedEventLog,\n};\n\nexport const ColonyInitialisedEventItem = (props: ColonyInitialisedEventItemProps) => {\n  const { event, ...htmlProps } = props;\n\n  return (\n    <li {...htmlProps} className={styles.eventItem}>\n      <div className={styles.avatar}>\n        <Blockies seed={event.colonyAddress} />\n      </div>\n      <div className={styles.content}>\n        <div className={styles.primary}>\n          <span>Congratulations! It's a beautiful baby colony!</span>\n        </div>\n        <div className={styles.secondary}>{formatDate(event.logTime)}</div>\n      </div>\n    </li>\n  );\n};\n\nexport const ColonyRoleSetEventItem = (props: ColonyRoleSetEventItemProps) => {\n  const { event, ...htmlProps } = props;\n\n  return (\n    <li {...htmlProps} className={styles.eventItem}>\n      <div className={styles.avatar}>\n        <Blockies seed={event.userAddress} />\n      </div>\n      <div className={styles.content}>\n        <div className={styles.primary}>\n          <span className={styles.heavy}>{event.role}</span>\n          <span> role assigned to user </span>\n          <span className={styles.heavy}>{event.userAddress}</span>\n          <span> in domain </span>\n          <span className={styles.heavy}>{event.domainId}</span>\n          <span>.</span>\n        </div>\n        <div className={styles.secondary}>{formatDate(event.logTime)}</div>\n      </div>\n    </li>\n  );\n};\n\nexport const PayoutClaimedEventItem = (props: PayoutClaimedEventItemProps) => {\n  const { event, ...htmlProps } = props;\n\n  return (\n    <li {...htmlProps} className={styles.eventItem}>\n      <div className={styles.avatar}>\n        <Blockies seed={event.userAddress} />\n      </div>\n      <div className={styles.content}>\n        <div className={styles.primary}>\n          <span>User </span>\n          <span className={styles.heavy}>{event.userAddress}</span>\n          <span> claimed </span>\n          <span className={styles.heavy}>{event.amount}</span>\n          <span className={styles.heavy}>{event.token}</span>\n          <span> payout from pot </span>\n          <span className={styles.heavy}>{event.fundingPotId}</span>\n          <span>.</span>\n        </div>\n        <div className={styles.secondary}>{formatDate(event.logTime)}</div>\n      </div>\n    </li>\n  );\n};\n\nexport const DomainAddedEventItem = (props: DomainAddedEventItemProps) => {\n  const { event, ...htmlProps } = props;\n\n  return (\n    <li {...htmlProps} className={styles.eventItem}>\n      <div className={styles.avatar}>\n        <Blockies seed={event.colonyAddress} />\n      </div>\n      <div className={styles.content}>\n        <div className={styles.primary}>\n          <span>Domain </span>\n          <span className={styles.heavy}>{event.domainId}</span>\n          <span> added.</span>\n        </div>\n        <div className={styles.secondary}>{formatDate(event.logTime)}</div>\n      </div>\n    </li>\n  );\n};\n\nconst EventItem = (props: EventItemProps) => {\n  const { event, ...htmlProps } = props;\n\n  switch (event?.eventType) {\n    case EventTypes.ColonyInitialised:\n      return <ColonyInitialisedEventItem {...htmlProps} event={event as ColonyInitialisedEventLog} />;\n    case EventTypes.ColonyRoleSet:\n      return <ColonyRoleSetEventItem {...htmlProps} event={event as ColonyRoleSetEventLog} />;\n    case EventTypes.PayoutClaimed:\n      return <PayoutClaimedEventItem {...htmlProps} event={event as PayoutClaimedEventLog} />;\n    case EventTypes.DomainAdded:\n      return <DomainAddedEventItem {...htmlProps} event={event as DomainAddedEventLog} />;\n    default:\n      return null;\n  }\n};\n\nexport default EventItem;","import React from 'react';\nimport ItemList from './ItemList';\nimport EventItem from './EventItem';\nimport { EventLog } from '../../features/event/slice';\n\nexport type EventListProps = React.HTMLAttributes<HTMLElement> & {\n  events: EventLog[],\n};\n\nconst EventList = (props: EventListProps) => {\n  const { events = [], ...htmlProps } = props;\n\n  return (\n    <ItemList {...htmlProps}>\n      {events.map((event) => <EventItem key={`event-${event.id}`} event={event} />)}\n    </ItemList>\n  )\n};\n\nexport default EventList;","import React, { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getEventLogsAsync } from './features/event/slice';\nimport EventList from './components/EventList';\nimport styles from './App.module.scss';\n\nconst App = () => {\n  const dispatch = useAppDispatch();\n  const events = useAppSelector((state) => state.event.events ?? []);\n\n  useEffect(() => {\n    dispatch(getEventLogsAsync());\n  }, [dispatch]);\n\n  return (\n    <div className={styles.app}>\n      <EventList events={events} />\n    </div>\n  );\n};\n\nexport default App;","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport eventReducer from '../features/event/slice';\n\nexport const store = configureStore({\n  reducer: {\n    event: eventReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemListContainer\":\"EventList_itemListContainer__2xiFf\",\"eventItem\":\"EventList_eventItem__3NqkL\",\"avatar\":\"EventList_avatar__2DzFu\",\"content\":\"EventList_content__2MkSR\",\"primary\":\"EventList_primary__2GtUR\",\"secondary\":\"EventList_secondary__3YDjV\",\"heavy\":\"EventList_heavy__3MwtL\"};"],"sourceRoot":""}